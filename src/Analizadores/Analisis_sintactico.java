
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Analisis_sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public Analisis_sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Analisis_sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analisis_sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\066\000\002\002\004\000\002\003\006\000\002\004" +
    "\011\000\002\005\005\000\002\006\002\000\002\032\002" +
    "\000\002\006\005\000\002\033\002\000\002\006\005\000" +
    "\002\034\002\000\002\006\005\000\002\006\004\000\002" +
    "\006\004\000\002\006\004\000\002\006\004\000\002\007" +
    "\006\000\002\022\005\000\002\010\002\000\002\010\006" +
    "\000\002\020\002\000\002\020\006\000\002\011\005\000" +
    "\002\011\005\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\017\002\000\002\035" +
    "\002\000\002\017\005\000\002\016\005\000\002\016\005" +
    "\000\002\016\005\000\002\036\002\000\002\016\010\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\013\005\000\002\023\003\000\002\023\004\000\002\023" +
    "\003\000\002\023\004\000\002\027\006\000\002\027\006" +
    "\000\002\030\003\000\002\030\004\000\002\030\003\000" +
    "\002\031\010\000\002\014\010\000\002\026\007\000\002" +
    "\012\007\000\002\024\005\000\002\025\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\171\000\004\004\004\001\002\000\004\006\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\021\166\001\002\000\004\010\011\001\002\000" +
    "\022\011\ufffd\012\015\015\023\022\027\024\031\026\024" +
    "\030\022\031\017\001\002\000\004\005\013\001\002\000" +
    "\004\002\000\001\002\000\022\011\ufffd\012\015\015\023" +
    "\022\027\024\031\026\024\030\022\031\017\001\002\000" +
    "\004\020\122\001\002\000\022\011\ufffd\012\015\015\023" +
    "\022\027\024\031\026\024\030\022\031\017\001\002\000" +
    "\004\033\116\001\002\000\022\011\ufff8\012\ufff8\015\ufff8" +
    "\022\ufff8\024\ufff8\026\ufff8\030\ufff8\031\ufff8\001\002\000" +
    "\004\011\113\001\002\000\004\035\107\001\002\000\006" +
    "\026\103\042\102\001\002\000\024\011\ufffa\012\ufffa\015" +
    "\ufffa\022\ufffa\024\ufffa\026\ufffa\030\ufffa\031\ufffa\035\070" +
    "\001\002\000\022\011\ufffd\012\015\015\023\022\027\024" +
    "\031\026\024\030\022\031\017\001\002\000\022\011\ufffc" +
    "\012\ufffc\015\ufffc\022\ufffc\024\ufffc\026\ufffc\030\ufffc\031" +
    "\ufffc\001\002\000\004\033\056\001\002\000\022\011\ufffd" +
    "\012\015\015\023\022\027\024\031\026\024\030\022\031" +
    "\017\001\002\000\004\047\032\001\002\000\004\035\046" +
    "\001\002\000\004\030\022\001\002\000\004\046\035\001" +
    "\002\000\004\043\044\001\002\000\004\050\040\001\002" +
    "\000\004\025\043\001\002\000\004\043\041\001\002\000" +
    "\004\044\042\001\002\000\004\025\uffcc\001\002\000\022" +
    "\011\uffd0\012\uffd0\015\uffd0\022\uffd0\024\uffd0\026\uffd0\030" +
    "\uffd0\031\uffd0\001\002\000\004\044\045\001\002\000\004" +
    "\050\uffcd\001\002\000\004\032\047\001\002\000\006\026" +
    "\051\032\uffe6\001\002\000\004\032\054\001\002\000\010" +
    "\025\uffe5\026\uffe5\032\uffe5\001\002\000\010\025\uffe6\026" +
    "\051\032\uffe6\001\002\000\006\025\uffe4\032\uffe4\001\002" +
    "\000\004\030\uffcf\001\002\000\004\011\ufff5\001\002\000" +
    "\006\026\061\044\060\001\002\000\004\034\063\001\002" +
    "\000\004\034\uffd2\001\002\000\010\026\061\034\uffd4\044" +
    "\060\001\002\000\004\034\uffd3\001\002\000\022\011\uffd6" +
    "\012\uffd6\015\uffd6\022\uffd6\024\uffd6\026\uffd6\030\uffd6\031" +
    "\uffd6\001\002\000\022\011\ufffd\012\015\015\023\022\027" +
    "\024\031\026\024\030\022\031\017\001\002\000\004\011" +
    "\ufffb\001\002\000\004\011\ufff4\001\002\000\022\011\ufffd" +
    "\012\015\015\023\022\027\024\031\026\024\030\022\031" +
    "\017\001\002\000\004\044\071\001\002\000\010\036\073" +
    "\037\072\040\075\001\002\000\004\044\uffdd\001\002\000" +
    "\004\044\uffde\001\002\000\004\044\076\001\002\000\004" +
    "\044\uffdc\001\002\000\004\041\077\001\002\000\022\011" +
    "\uffd1\012\uffd1\015\uffd1\022\uffd1\024\uffd1\026\uffd1\030\uffd1" +
    "\031\uffd1\001\002\000\004\011\ufff9\001\002\000\004\016" +
    "\106\001\002\000\010\016\uffda\026\103\042\102\001\002" +
    "\000\010\016\uffd8\026\103\042\102\001\002\000\004\016" +
    "\uffd7\001\002\000\004\016\uffd9\001\002\000\022\011\uffdb" +
    "\012\uffdb\015\uffdb\022\uffdb\024\uffdb\026\uffdb\030\uffdb\031" +
    "\uffdb\001\002\000\004\032\110\001\002\000\004\027\111" +
    "\001\002\000\004\041\112\001\002\000\024\011\uffce\012" +
    "\uffce\015\uffce\022\uffce\024\uffce\026\uffce\030\uffce\031\uffce" +
    "\046\uffce\001\002\000\004\005\ufffe\001\002\000\022\011" +
    "\ufffd\012\015\015\023\022\027\024\031\026\024\030\022" +
    "\031\017\001\002\000\004\011\ufff7\001\002\000\006\026" +
    "\061\044\060\001\002\000\004\034\120\001\002\000\022" +
    "\011\uffd5\012\uffd5\015\uffd5\022\uffd5\024\uffd5\026\uffd5\030" +
    "\uffd5\031\uffd5\001\002\000\004\011\ufff6\001\002\000\004" +
    "\035\163\001\002\000\006\013\ufff0\014\ufff0\001\002\000" +
    "\006\013\125\014\126\001\002\000\022\011\ufff2\012\ufff2" +
    "\015\ufff2\022\ufff2\024\ufff2\026\ufff2\030\ufff2\031\ufff2\001" +
    "\002\000\006\017\uffee\023\uffee\001\002\000\006\017\131" +
    "\023\130\001\002\000\006\013\uffef\014\uffef\001\002\000" +
    "\004\035\132\001\002\000\006\024\134\032\133\001\002" +
    "\000\014\026\051\032\uffe6\033\145\044\144\045\140\001" +
    "\002\000\006\025\uffe6\026\051\001\002\000\006\017\uffed" +
    "\023\uffed\001\002\000\004\025\137\001\002\000\006\017" +
    "\uffec\023\uffec\001\002\000\004\032\uffe7\001\002\000\004" +
    "\032\162\001\002\000\004\032\uffea\001\002\000\004\032" +
    "\uffe8\001\002\000\012\032\uffe9\036\151\037\150\040\152" +
    "\001\002\000\006\033\145\044\147\001\002\000\004\034" +
    "\uffe0\001\002\000\010\036\151\037\150\040\152\001\002" +
    "\000\004\044\155\001\002\000\004\044\154\001\002\000" +
    "\004\044\153\001\002\000\006\032\uffe2\034\uffe2\001\002" +
    "\000\006\032\uffe1\034\uffe1\001\002\000\006\032\uffe3\034" +
    "\uffe3\001\002\000\004\034\157\001\002\000\004\036\160" +
    "\001\002\000\004\051\161\001\002\000\006\032\uffdf\034" +
    "\uffdf\001\002\000\006\017\uffeb\023\uffeb\001\002\000\004" +
    "\044\164\001\002\000\006\013\ufff1\014\ufff1\001\002\000" +
    "\004\011\ufff3\001\002\000\004\035\167\001\002\000\004" +
    "\032\170\001\002\000\006\026\051\032\uffe6\001\002\000" +
    "\004\032\172\001\002\000\004\007\173\001\002\000\004" +
    "\010\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\171\000\004\003\004\001\001\000\004\004\007\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\011\001\001\000\020\006\020\007\025\012" +
    "\015\013\017\014\027\027\024\031\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\006\164\007\025\012" +
    "\015\013\017\014\027\027\024\031\013\001\001\000\004" +
    "\022\122\001\001\000\020\006\120\007\025\012\015\013" +
    "\017\014\027\027\024\031\013\001\001\000\002\001\001" +
    "\000\004\034\113\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\100\001\001\000\004\033\066\001\001" +
    "\000\020\006\065\007\025\012\015\013\017\014\027\027" +
    "\024\031\013\001\001\000\004\032\063\001\001\000\002" +
    "\001\001\000\020\006\054\007\025\012\015\013\017\014" +
    "\027\027\024\031\013\001\001\000\004\026\032\001\001" +
    "\000\002\001\001\000\004\012\033\001\001\000\004\024" +
    "\035\001\001\000\002\001\001\000\004\025\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\047\001\001\000" +
    "\002\001\001\000\004\035\051\001\001\000\004\017\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\030\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\030\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\006\064\007\025\012\015\013\017" +
    "\014\027\027\024\031\013\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\006\077\007\025\012\015\013\017" +
    "\014\027\027\024\031\013\001\001\000\002\001\001\000" +
    "\004\015\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\104\001\001\000\004\023\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\006\114\007\025\012\015\013\017" +
    "\014\027\027\024\031\013\001\001\000\002\001\001\000" +
    "\004\030\116\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\123\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\126" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\134\001\001\000\010\016\142\017\141" +
    "\021\140\001\001\000\004\017\135\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\145\001\001\000\004\036\155" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\170\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analisis_sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analisis_sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analisis_sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public String error=""; 
   
    public String tabla = "";

    public String tab = "";
    public String ident = "";
    public String fila = "";
    public String columna = "";
    public String column = "";
    public String col = "";
    public String resultado = "";

    public static LinkedList <TError> TablaES= new LinkedList <TError>();

public void syntax_error(Symbol s)
        {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        error = "Error Sintactico: " + lexema +" en la linea "+ fila + " en la columna " + columna + "\nCaracter no esperado";
        System.out.println(error);        

        TError datos = new TError(lexema,fila,columna,"Error Sintactico ", "Caracter no esperado" );
        TablaES.add(datos);
       }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Analisis_sintactico$actions {




  private final Analisis_sintactico parser;

  /** Constructor */
  CUP$Analisis_sintactico$actions(Analisis_sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Analisis_sintactico$do_action_part00000000(
    int                        CUP$Analisis_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analisis_sintactico$parser,
    java.util.Stack            CUP$Analisis_sintactico$stack,
    int                        CUP$Analisis_sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analisis_sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Analisis_sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Analisis_sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analisis_sintactico$parser.done_parsing();
          return CUP$Analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Inicio_Doc_html ENCABEZADO CUERPO Fin_Doc_html 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Analisis_sintactico$stack.peek()).value;
		    
       resultado = "<html>\n" + String.valueOf(b) + String.valueOf(c)+ "\n</html>";

     
              CUP$Analisis_sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",1, ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ENCABEZADO ::= Inicio_Encabezado Titulo Igual Comillas IDENT Comillas Fin_Encabezado 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analisis_sintactico$stack.peek()).value;
		
           RESULT = "<head>\n"+"<title>\n"+ ident + " \n</title>\n" + "</head>\n";
       
              CUP$Analisis_sintactico$result = parser.getSymbolFactory().newSymbol("ENCABEZADO",2, ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CUERPO ::= Inicio_Cuerpo BODY Fin_Cuerpo 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-1)).value;
		
             RESULT = " <body>\n" +  String.valueOf(a) + "</body>\n";
             
          
              CUP$Analisis_sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",3, ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // BODY ::= 
            {
              Object RESULT =null;

              CUP$Analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY",4, ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$0 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_sintactico$stack.peek()).value;

               
            RESULT = String.valueOf(a); 
              CUP$Analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$0",24, ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // BODY ::= TABLA NT$0 BODY 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-2)).value;

              CUP$Analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY",4, ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$1 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analisis_sintactico$stack.peek()).value;
RESULT = String.valueOf(b); 
              CUP$Analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$1",25, ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // BODY ::= Identificador NT$1 BODY 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-2)).value;

              CUP$Analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY",4, ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$2 ::= 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analisis_sintactico$stack.peek()).value;
  RESULT = String.valueOf(c); 
              CUP$Analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$2",26, ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // BODY ::= LISTA NT$2 BODY 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-2)).value;

              CUP$Analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY",4, ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // BODY ::= ENLACE BODY 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-1)).value;
		  RESULT = String.valueOf(d); 
              CUP$Analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY",4, ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // BODY ::= IMAGEN BODY 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-1)).value;
		  RESULT = String.valueOf(e); 
              CUP$Analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY",4, ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // BODY ::= NEGRITA BODY 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-1)).value;
		  RESULT = String.valueOf(f); 
              CUP$Analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY",4, ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // BODY ::= OP BODY 
            {
              Object RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-1)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-1)).value;
		 RESULT = String.valueOf(g); 
              CUP$Analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BODY",4, ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TABLA ::= Inicio_Tabla BORDE FILA Fin_Tabla 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-2)).value;
		 
            tabla += "<table"+ String.valueOf(a)+">\n" + fila + "\n</table>\n";    
           RESULT = tabla; 
              CUP$Analisis_sintactico$result = parser.getSymbolFactory().newSymbol("TABLA",5, ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // BORDE ::= Borde Igual Numeros 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analisis_sintactico$stack.peek()).value;
		 RESULT = " border="+"\"" +String.valueOf(c) +"\""; 
              CUP$Analisis_sintactico$result = parser.getSymbolFactory().newSymbol("BORDE",16, ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FILA ::= 
            {
              Object RESULT =null;

              CUP$Analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FILA",6, ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FILA ::= FILA Inicio_Fila COL Fin_Fila 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-1)).value;
		
             fila += " <tr>"+ String.valueOf(a) +"</tr>\n"; 
             
             RESULT = fila;
             columna = " ";
              
              CUP$Analisis_sintactico$result = parser.getSymbolFactory().newSymbol("FILA",6, ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // COL ::= 
            {
              Object RESULT =null;

              CUP$Analisis_sintactico$result = parser.getSymbolFactory().newSymbol("COL",14, ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // COL ::= COL Columna Igual COLUMNA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_sintactico$stack.peek()).value;
		
       
           columna += "<td>"+ col +"</td>";
          RESULT = columna; 
              CUP$Analisis_sintactico$result = parser.getSymbolFactory().newSymbol("COL",14, ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // COLUMNA ::= Inicio_Imagen IDENT Fin_Imagen 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-1)).value;
		
           column = "<img src=\""+ String.valueOf(a) +"\">";
           
           RESULT = column; 
              CUP$Analisis_sintactico$result = parser.getSymbolFactory().newSymbol("COLUMNA",7, ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // COLUMNA ::= Comillas VAL Comillas 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-1)).value;
		
             
             col = String.valueOf(a);
             RESULT = col; 
              CUP$Analisis_sintactico$result = parser.getSymbolFactory().newSymbol("COLUMNA",7, ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VAL ::= IDENT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_sintactico$stack.peek()).value;
		 RESULT = ident; 
              CUP$Analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAL",15, ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VAL ::= Numeros 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analisis_sintactico$stack.peek()).value;
		 RESULT = String.valueOf(b);  
              CUP$Analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAL",15, ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VAL ::= OPERACION 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Analisis_sintactico$stack.peek()).value;
		RESULT =  String.valueOf(c); 
              CUP$Analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAL",15, ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VAL ::= Correo 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Analisis_sintactico$stack.peek()).value;
		 RESULT = String.valueOf(d);
              CUP$Analisis_sintactico$result = parser.getSymbolFactory().newSymbol("VAL",15, ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // IDENT ::= 
            {
              Object RESULT =null;

              CUP$Analisis_sintactico$result = parser.getSymbolFactory().newSymbol("IDENT",13, ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$3 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_sintactico$stack.peek()).value;
 
         ident =  String.valueOf(a);
         RESULT =ident; 
              CUP$Analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$3",27, ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // IDENT ::= Identificador NT$3 IDENT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-2)).value;

              CUP$Analisis_sintactico$result = parser.getSymbolFactory().newSymbol("IDENT",13, ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OPERACION ::= Numeros Signo_Suma Numeros 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analisis_sintactico$stack.peek()).value;
		 
                  int var1 = Integer.parseInt(a.toString());
                  int var2 = Integer.parseInt(b.toString());
                  int resul= var1+var2;
                  RESULT = String.valueOf(resul);
                 
              CUP$Analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",12, ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OPERACION ::= Numeros Signo_resta Numeros 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analisis_sintactico$stack.peek()).value;
		 
                  int var1 = Integer.parseInt(a.toString());
                  int var2 = Integer.parseInt(b.toString());
                  int resul= var1-var2;
                  RESULT = String.valueOf(resul);
                 
              CUP$Analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",12, ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // OPERACION ::= Numeros Signo_multiplicacion Numeros 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Analisis_sintactico$stack.peek()).value;
		 
                  int var1 = Integer.parseInt(a.toString());
                  int var2 = Integer.parseInt(b.toString());
                  int resul= var1*var2;
                  RESULT = String.valueOf(resul);
                   
              CUP$Analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",12, ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$4 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_sintactico$stack.peek()).value;
 RESULT = a; 
              CUP$Analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NT$4",28, ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OPERACION ::= Parentesis_Aper OPERACION NT$4 Parentesis_Cierre Signo_multiplicacion Decimal 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-4)).value;

              CUP$Analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",12, ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SIGNOS ::= Signo_multiplicacion 
            {
              Object RESULT =null;

              CUP$Analisis_sintactico$result = parser.getSymbolFactory().newSymbol("SIGNOS",11, ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SIGNOS ::= Signo_Suma 
            {
              Object RESULT =null;

              CUP$Analisis_sintactico$result = parser.getSymbolFactory().newSymbol("SIGNOS",11, ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SIGNOS ::= Signo_resta 
            {
              Object RESULT =null;

              CUP$Analisis_sintactico$result = parser.getSymbolFactory().newSymbol("SIGNOS",11, ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LISTA ::= Inicio_Lista LIS Fin_Lista 
            {
              Object RESULT =null;
		 RESULT = "<lis>"+ "</lis>"; 
              CUP$Analisis_sintactico$result = parser.getSymbolFactory().newSymbol("LISTA",9, ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LIS ::= Separador 
            {
              Object RESULT =null;

              CUP$Analisis_sintactico$result = parser.getSymbolFactory().newSymbol("LIS",17, ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LIS ::= Separador LIS 
            {
              Object RESULT =null;

              CUP$Analisis_sintactico$result = parser.getSymbolFactory().newSymbol("LIS",17, ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LIS ::= Identificador 
            {
              Object RESULT =null;

              CUP$Analisis_sintactico$result = parser.getSymbolFactory().newSymbol("LIS",17, ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LIS ::= Identificador LIS 
            {
              Object RESULT =null;

              CUP$Analisis_sintactico$result = parser.getSymbolFactory().newSymbol("LIS",17, ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NEGRITA ::= Negrita Parentesis_Aper A Parentesis_Cierre 
            {
              Object RESULT =null;

              CUP$Analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NEGRITA",21, ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NEGRITA ::= Imprimir Parentesis_Aper A Parentesis_Cierre 
            {
              Object RESULT =null;

              CUP$Analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NEGRITA",21, ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // A ::= Identificador 
            {
              Object RESULT =null;

              CUP$Analisis_sintactico$result = parser.getSymbolFactory().newSymbol("A",22, ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // A ::= Identificador A 
            {
              Object RESULT =null;

              CUP$Analisis_sintactico$result = parser.getSymbolFactory().newSymbol("A",22, ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // A ::= Numeros 
            {
              Object RESULT =null;

              CUP$Analisis_sintactico$result = parser.getSymbolFactory().newSymbol("A",22, ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OP ::= Identificador Igual Numeros SIGNOS Numeros Punto_coma 
            {
              Object RESULT =null;

              CUP$Analisis_sintactico$result = parser.getSymbolFactory().newSymbol("OP",23, ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // IMAGEN ::= Inicio_Imagen NOM ENLACE ANCHO ALTURA Fin_Imagen 
            {
              Object RESULT =null;

              CUP$Analisis_sintactico$result = parser.getSymbolFactory().newSymbol("IMAGEN",10, ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NOM ::= Nombre Igual Comillas IDENT Comillas 
            {
              Object RESULT =null;

              CUP$Analisis_sintactico$result = parser.getSymbolFactory().newSymbol("NOM",20, ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ENLACE ::= EnlaceR Igual Comillas Enlace Punto_coma 
            {
              Object RESULT =null;

              CUP$Analisis_sintactico$result = parser.getSymbolFactory().newSymbol("ENLACE",8, ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ANCHO ::= Ancho Dos_puntos Numeros 
            {
              Object RESULT =null;

              CUP$Analisis_sintactico$result = parser.getSymbolFactory().newSymbol("ANCHO",18, ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ALTURA ::= Altura Dos_puntos Numeros 
            {
              Object RESULT =null;

              CUP$Analisis_sintactico$result = parser.getSymbolFactory().newSymbol("ALTURA",19, ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.elementAt(CUP$Analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$Analisis_sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Analisis_sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Analisis_sintactico$do_action(
    int                        CUP$Analisis_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analisis_sintactico$parser,
    java.util.Stack            CUP$Analisis_sintactico$stack,
    int                        CUP$Analisis_sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Analisis_sintactico$do_action_part00000000(
                               CUP$Analisis_sintactico$act_num,
                               CUP$Analisis_sintactico$parser,
                               CUP$Analisis_sintactico$stack,
                               CUP$Analisis_sintactico$top);
    }
}

}
