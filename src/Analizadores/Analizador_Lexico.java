/* The following code was generated by JFlex 1.6.1 */

/*------Codigo de Usuario -------*/
package Analizadores;
import java_cup.runtime.*;
import java.util.LinkedList;
import javax.swing.table.DefaultTableModel;
 

/*------Opciones y Declaraciones -------*/



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>Lexer.jflex</tt>
 */
public class Analizador_Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  3, 42, 42,  3,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     3,  0, 32,  0,  0,  0,  8,  0, 33, 34, 36, 37, 40, 38,  5,  8, 
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 41, 39,  0, 35,  0,  0, 
     4, 21, 22, 20, 24, 19, 18, 27, 14, 10,  1,  1, 17, 16, 12, 25, 
    28,  1, 26, 30, 15, 29,  1,  1,  1,  1, 23,  0,  0,  0,  0, 13, 
     0, 21, 22, 20, 24, 19, 18, 27, 14, 10,  1,  1, 17, 16, 12, 25, 
    28,  1, 26, 30, 15, 29,  1,  6,  1,  1, 23,  0,  9,  0,  0,  0, 
     0,  0,  0,  0,  0, 42,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  7,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  7,  0,  0,  0,  0,  7,  0,  0,  0,  0,  0, 
     7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7, 
     7,  7,  7,  7,  7,  7,  7,  0,  7,  7,  7,  7,  7,  7,  7,  7, 
     7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7, 
     7,  7,  7,  7,  7,  7,  7,  0,  7,  7,  7,  7,  7,  7,  7,  7
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\2\2\1\1\10\2"+
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\2\0\3\2\2\0\3\2\1\0\2\2"+
    "\1\0\1\2\1\0\6\2\1\0\1\17\2\2\1\0"+
    "\2\2\2\0\2\2\2\20\2\2\1\0\2\2\2\0"+
    "\7\2\3\0\2\2\2\0\4\2\2\0\2\21\7\2"+
    "\1\0\1\22\1\0\2\2\2\0\1\2\1\0\3\2"+
    "\3\0\4\2\1\23\1\2\1\24\2\0\2\2\2\0"+
    "\1\2\1\0\1\2\4\0\4\2\1\25\1\26\2\0"+
    "\1\2\1\0\2\27\10\0\1\2\1\30\1\0\1\31"+
    "\2\0\2\32\1\33\1\34\1\0\1\35\1\0\1\36"+
    "\1\37\1\40\1\2\2\0\1\41\1\0\1\42\1\43"+
    "\1\2\2\0\1\44\1\2\1\45\1\46\5\0\1\47"+
    "\1\50";

  private static int [] zzUnpackAction() {
    int [] result = new int[189];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\126\0\201\0\254\0\327\0\u0102\0\u012d"+
    "\0\u0158\0\u0183\0\u01ae\0\u01d9\0\u0204\0\u022f\0\u025a\0\u0285"+
    "\0\53\0\53\0\53\0\53\0\53\0\53\0\53\0\53"+
    "\0\53\0\53\0\u02b0\0\u02db\0\u0306\0\u0331\0\u035c\0\u0387"+
    "\0\u03b2\0\u03dd\0\u0408\0\u0433\0\u045e\0\u0489\0\u04b4\0\u04df"+
    "\0\u050a\0\u0535\0\u0560\0\u058b\0\u05b6\0\u05e1\0\u060c\0\u0637"+
    "\0\u0662\0\u02db\0\u068d\0\u06b8\0\u06e3\0\u070e\0\u0739\0\u0764"+
    "\0\u078f\0\u07ba\0\u07e5\0\126\0\53\0\u0810\0\u083b\0\u0866"+
    "\0\u0891\0\u08bc\0\u08e7\0\u0912\0\u093d\0\u0968\0\u0993\0\u09be"+
    "\0\u09e9\0\u0a14\0\u0a3f\0\u0a6a\0\u0a95\0\u0ac0\0\u0aeb\0\u0b16"+
    "\0\u0b41\0\u0b6c\0\u0b97\0\u0bc2\0\u0bed\0\u0c18\0\u0c43\0\u0c6e"+
    "\0\u0c99\0\u0cc4\0\u0cef\0\u0d1a\0\u0d45\0\u0d70\0\u0d9b\0\u0dc6"+
    "\0\u0df1\0\u0e1c\0\u0e47\0\u0e72\0\u0e9d\0\u0ec8\0\u0ef3\0\u0f1e"+
    "\0\u0f49\0\u0f74\0\u0f9f\0\u0fca\0\u0ff5\0\u1020\0\u104b\0\u1076"+
    "\0\u10a1\0\u10cc\0\u10f7\0\u1122\0\126\0\u114d\0\126\0\u1178"+
    "\0\u11a3\0\u11ce\0\u11f9\0\u1224\0\u124f\0\u127a\0\u12a5\0\u12d0"+
    "\0\u12fb\0\u1326\0\u1351\0\u137c\0\u13a7\0\u13d2\0\u13fd\0\u1428"+
    "\0\126\0\u1178\0\u1453\0\u147e\0\u14a9\0\u14d4\0\126\0\53"+
    "\0\u14ff\0\u152a\0\u1555\0\u1580\0\u15ab\0\u15d6\0\u1601\0\u162c"+
    "\0\u1657\0\126\0\u1682\0\53\0\u16ad\0\u16d8\0\126\0\53"+
    "\0\53\0\53\0\u1703\0\53\0\u172e\0\53\0\53\0\53"+
    "\0\u1759\0\u1784\0\u17af\0\53\0\u17da\0\53\0\53\0\u1805"+
    "\0\u1830\0\u185b\0\53\0\u1886\0\53\0\53\0\u18b1\0\u18dc"+
    "\0\u1907\0\u1932\0\u195d\0\53\0\53";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[189];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\2\2\1\6\2\2\1\5"+
    "\1\7\1\10\1\11\1\2\1\3\1\12\1\3\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\10\3\1\2\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\55\0\1\3\2\0\1\33\1\0\1\3\3\0"+
    "\1\3\1\0\1\3\1\0\21\3\16\0\1\4\2\0"+
    "\1\34\50\0\1\5\5\0\1\5\42\0\1\3\2\0"+
    "\1\33\1\0\1\35\3\0\1\3\1\0\1\3\1\0"+
    "\21\3\15\0\1\3\2\0\1\33\1\0\1\3\3\0"+
    "\1\3\1\0\1\36\1\0\2\3\1\37\16\3\30\0"+
    "\1\40\3\0\1\41\33\0\1\3\2\0\1\33\1\0"+
    "\1\3\3\0\1\3\1\0\1\3\1\0\5\3\1\42"+
    "\5\3\1\43\5\3\15\0\1\3\2\0\1\33\1\0"+
    "\1\3\3\0\1\44\1\45\1\3\1\0\7\3\1\46"+
    "\11\3\15\0\1\3\2\0\1\33\1\0\1\3\3\0"+
    "\1\47\1\50\1\3\1\0\21\3\15\0\1\3\2\0"+
    "\1\33\1\0\1\3\3\0\1\51\1\52\1\3\1\0"+
    "\21\3\15\0\1\3\2\0\1\33\1\0\1\3\3\0"+
    "\1\3\1\0\1\53\1\0\21\3\15\0\1\3\2\0"+
    "\1\33\1\0\1\3\3\0\1\3\1\0\1\3\1\0"+
    "\13\3\1\54\3\3\1\55\1\3\15\0\1\3\2\0"+
    "\1\33\1\0\1\3\3\0\1\3\1\0\1\56\1\0"+
    "\3\3\1\57\15\3\15\0\1\3\2\0\1\33\1\0"+
    "\1\3\3\0\1\3\1\0\1\3\1\0\13\3\1\60"+
    "\5\3\15\0\1\61\4\0\1\61\3\0\1\61\1\0"+
    "\1\61\1\0\21\61\16\0\1\62\51\0\1\3\2\0"+
    "\1\33\1\0\1\63\3\0\1\3\1\0\1\3\1\0"+
    "\21\3\15\0\1\3\2\0\1\33\1\0\1\3\3\0"+
    "\1\64\1\65\1\3\1\0\21\3\15\0\1\3\2\0"+
    "\1\33\1\0\1\3\3\0\1\3\1\0\1\3\1\0"+
    "\7\3\1\66\6\3\1\67\2\3\26\0\2\65\64\0"+
    "\1\70\6\0\1\71\17\0\1\3\2\0\1\33\1\0"+
    "\1\3\3\0\1\3\1\0\1\3\1\0\15\3\1\72"+
    "\3\3\15\0\1\3\2\0\1\33\1\0\1\3\3\0"+
    "\1\3\1\0\1\3\1\0\2\3\1\73\16\3\15\0"+
    "\1\3\2\0\1\33\1\0\1\3\3\0\1\3\1\0"+
    "\1\3\1\0\1\3\1\74\17\3\33\0\1\75\34\0"+
    "\1\3\2\0\1\33\1\0\1\3\3\0\1\3\1\0"+
    "\1\3\1\0\10\3\1\76\10\3\15\0\1\3\2\0"+
    "\1\33\1\0\1\3\3\0\1\3\1\0\1\3\1\0"+
    "\20\3\1\77\1\100\51\0\2\100\14\0\1\3\2\0"+
    "\1\33\1\0\1\3\3\0\1\3\1\0\1\101\1\0"+
    "\3\3\1\102\15\3\30\0\1\103\4\0\1\104\32\0"+
    "\1\3\2\0\1\33\1\0\1\3\3\0\1\3\1\0"+
    "\1\3\1\0\3\3\1\105\2\3\1\106\12\3\15\0"+
    "\1\3\2\0\1\33\1\0\1\3\3\0\1\3\1\0"+
    "\1\3\1\0\3\3\1\107\15\3\15\0\1\3\2\0"+
    "\1\33\1\0\1\3\3\0\1\3\1\0\1\3\1\0"+
    "\5\3\1\110\13\3\15\0\1\3\2\0\1\33\1\0"+
    "\1\3\3\0\1\3\1\0\1\3\1\0\6\3\1\111"+
    "\12\3\15\0\1\3\2\0\1\33\1\0\1\3\3\0"+
    "\1\3\1\0\1\3\1\0\1\3\1\112\17\3\15\0"+
    "\1\3\2\0\1\33\1\0\1\3\3\0\1\3\1\0"+
    "\1\3\1\0\14\3\1\113\4\3\15\0\1\61\3\0"+
    "\1\114\1\61\3\0\1\61\1\0\1\61\1\0\21\61"+
    "\15\0\1\3\2\0\1\33\1\115\1\3\3\0\1\3"+
    "\1\0\1\3\1\0\21\3\15\0\1\3\2\0\1\33"+
    "\1\0\1\3\3\0\1\3\1\0\1\3\1\116\21\3"+
    "\31\0\1\116\36\0\1\3\2\0\1\33\1\0\1\3"+
    "\3\0\1\3\1\0\1\3\1\0\15\3\1\117\3\3"+
    "\15\0\1\3\2\0\1\33\1\0\1\3\3\0\1\3"+
    "\1\0\1\3\1\0\14\3\1\120\4\3\47\0\1\121"+
    "\51\0\1\122\21\0\1\3\2\0\1\33\1\0\1\3"+
    "\3\0\1\3\1\0\1\3\1\0\14\3\1\123\4\3"+
    "\15\0\1\3\2\0\1\33\1\0\1\3\3\0\1\3"+
    "\1\0\1\3\1\0\10\3\1\124\10\3\15\0\1\3"+
    "\2\0\1\33\1\0\1\3\3\0\1\3\1\0\1\3"+
    "\1\0\3\3\1\125\15\3\15\0\1\3\2\0\1\33"+
    "\1\0\1\3\3\0\1\3\1\0\1\3\1\0\1\3"+
    "\1\126\17\3\33\0\1\127\34\0\1\3\2\0\1\33"+
    "\1\0\1\3\3\0\1\3\1\0\1\3\1\130\21\3"+
    "\15\0\1\3\2\0\1\33\1\0\1\3\3\0\1\3"+
    "\1\0\1\3\1\0\7\3\1\131\11\3\31\0\1\130"+
    "\62\0\1\132\26\0\1\3\2\0\1\33\1\0\1\3"+
    "\3\0\1\3\1\0\1\3\1\0\7\3\1\133\11\3"+
    "\15\0\1\3\2\0\1\33\1\0\1\3\3\0\1\3"+
    "\1\0\1\3\1\0\7\3\1\134\11\3\15\0\1\3"+
    "\2\0\1\33\1\0\1\3\3\0\1\3\1\0\1\3"+
    "\1\0\17\3\1\135\1\3\15\0\1\3\2\0\1\33"+
    "\1\0\1\3\3\0\1\3\1\0\1\3\1\0\14\3"+
    "\1\136\4\3\15\0\1\3\2\0\1\33\1\0\1\3"+
    "\3\0\1\3\1\0\1\3\1\0\1\137\20\3\15\0"+
    "\1\3\2\0\1\33\1\0\1\3\3\0\1\3\1\0"+
    "\1\3\1\0\17\3\1\140\1\3\15\0\1\3\2\0"+
    "\1\33\1\0\1\3\3\0\1\3\1\0\1\3\1\0"+
    "\12\3\1\141\6\3\15\0\1\142\4\0\1\142\3\0"+
    "\1\142\1\0\1\142\1\0\21\142\15\0\2\115\2\0"+
    "\1\143\2\115\2\0\26\115\31\0\1\144\35\0\1\3"+
    "\2\0\1\33\1\0\1\3\3\0\1\3\1\0\1\3"+
    "\1\0\5\3\1\145\13\3\15\0\1\3\2\0\1\33"+
    "\1\0\1\3\3\0\1\146\1\147\1\3\1\0\21\3"+
    "\37\0\1\150\41\0\2\147\40\0\1\3\2\0\1\33"+
    "\1\0\1\3\3\0\1\151\1\152\1\3\1\0\21\3"+
    "\15\0\1\3\2\0\1\33\1\0\1\3\3\0\1\3"+
    "\1\0\1\3\1\0\14\3\1\153\4\3\15\0\1\3"+
    "\2\0\1\33\1\0\1\3\3\0\1\3\1\0\1\3"+
    "\1\0\7\3\1\154\11\3\15\0\1\3\2\0\1\33"+
    "\1\0\1\3\3\0\1\3\1\0\1\3\1\0\7\3"+
    "\1\155\11\3\41\0\1\156\43\0\1\157\35\0\1\3"+
    "\2\0\1\33\1\0\1\3\3\0\1\3\1\0\1\3"+
    "\1\160\21\3\31\0\1\160\36\0\1\3\2\0\1\33"+
    "\1\0\1\3\3\0\1\3\1\0\1\3\1\0\6\3"+
    "\1\161\12\3\15\0\1\3\2\0\1\33\1\0\1\3"+
    "\3\0\1\3\1\0\1\3\1\0\10\3\1\162\10\3"+
    "\15\0\1\3\2\0\1\33\1\0\1\3\3\0\1\3"+
    "\1\0\1\3\1\0\2\3\1\163\16\3\15\0\1\3"+
    "\2\0\1\33\1\0\1\3\3\0\1\3\1\0\1\3"+
    "\1\0\16\3\1\164\2\3\15\0\1\3\2\0\1\33"+
    "\1\0\1\3\3\0\1\3\1\0\1\3\1\0\13\3"+
    "\1\165\5\3\15\0\1\3\2\0\1\33\1\0\1\3"+
    "\3\0\1\3\1\0\1\3\1\0\14\3\1\166\4\3"+
    "\15\0\1\3\2\0\1\33\1\0\1\3\3\0\1\3"+
    "\1\0\1\3\1\0\5\3\1\167\13\3\15\0\1\142"+
    "\3\0\1\170\1\142\3\0\1\142\1\0\1\142\1\0"+
    "\21\142\15\0\2\143\2\0\33\143\32\0\1\171\34\0"+
    "\1\3\2\0\1\33\1\0\1\3\3\0\1\3\1\0"+
    "\1\172\1\0\21\3\15\0\1\3\2\0\1\33\1\0"+
    "\1\3\3\0\1\3\1\0\1\3\1\0\2\3\1\173"+
    "\16\3\34\0\1\174\46\0\1\175\37\0\1\3\2\0"+
    "\1\33\1\0\1\3\3\0\1\3\1\0\1\3\1\0"+
    "\1\3\1\176\17\3\33\0\1\177\34\0\1\3\2\0"+
    "\1\33\1\0\1\3\3\0\1\3\1\0\1\3\1\0"+
    "\5\3\1\200\13\3\15\0\1\3\2\0\1\33\1\0"+
    "\1\3\3\0\1\3\1\0\1\3\1\201\21\3\15\0"+
    "\1\3\2\0\1\33\1\0\1\3\3\0\1\3\1\0"+
    "\1\3\1\202\21\3\31\0\1\202\54\0\1\203\55\0"+
    "\1\204\31\0\1\3\2\0\1\33\1\0\1\3\3\0"+
    "\1\3\1\0\1\3\1\0\5\3\1\205\13\3\15\0"+
    "\1\3\2\0\1\33\1\0\1\3\3\0\1\3\1\0"+
    "\1\3\1\0\5\3\1\206\13\3\15\0\1\3\2\0"+
    "\1\33\1\0\1\3\3\0\1\3\1\0\1\207\1\0"+
    "\21\3\15\0\1\3\2\0\1\33\1\0\1\3\3\0"+
    "\1\3\1\0\1\3\1\0\13\3\1\210\5\3\15\0"+
    "\1\3\2\0\1\33\1\0\1\3\3\0\1\3\1\0"+
    "\1\3\1\0\7\3\1\211\11\3\15\0\1\212\4\0"+
    "\1\212\3\0\1\212\1\0\1\212\1\0\21\212\34\0"+
    "\1\213\33\0\1\3\2\0\1\33\1\0\1\3\3\0"+
    "\1\3\1\0\1\3\1\214\21\3\15\0\1\3\2\0"+
    "\1\33\1\0\1\3\3\0\1\215\1\216\1\3\1\0"+
    "\21\3\26\0\2\216\54\0\1\214\36\0\1\3\2\0"+
    "\1\33\1\0\1\3\3\0\1\3\1\0\1\3\1\0"+
    "\7\3\1\217\11\3\41\0\1\220\26\0\1\3\2\0"+
    "\1\33\1\0\1\3\3\0\1\3\1\0\1\3\1\221"+
    "\21\3\26\0\2\222\6\0\1\223\42\0\2\224\6\0"+
    "\1\225\50\0\1\226\44\0\2\227\40\0\1\3\2\0"+
    "\1\33\1\0\1\3\3\0\1\3\1\0\1\3\1\230"+
    "\21\3\15\0\1\3\2\0\1\33\1\0\1\3\3\0"+
    "\1\3\1\0\1\3\1\0\11\3\1\231\7\3\15\0"+
    "\1\3\2\0\1\33\1\0\1\3\3\0\1\3\1\0"+
    "\1\3\1\0\7\3\1\232\11\3\15\0\1\3\2\0"+
    "\1\33\1\0\1\3\3\0\1\3\1\0\1\3\1\233"+
    "\21\3\35\0\1\234\43\0\2\235\6\0\1\236\31\0"+
    "\1\3\2\0\1\33\1\0\1\3\3\0\1\3\1\0"+
    "\1\3\1\0\14\3\1\237\4\3\46\0\1\240\52\0"+
    "\1\241\34\0\1\242\50\0\2\243\53\0\1\244\50\0"+
    "\2\245\60\0\1\246\45\0\1\247\70\0\1\250\21\0"+
    "\1\3\2\0\1\33\1\0\1\3\3\0\1\3\1\0"+
    "\1\3\1\0\7\3\1\251\11\3\26\0\2\252\6\0"+
    "\1\253\44\0\1\254\50\0\2\255\53\0\1\256\52\0"+
    "\1\257\37\0\1\3\2\0\1\33\1\0\1\3\3\0"+
    "\1\3\1\0\1\3\1\0\12\3\1\260\6\3\30\0"+
    "\1\261\50\0\2\262\53\0\1\263\37\0\1\3\2\0"+
    "\1\33\1\0\1\3\3\0\1\3\1\0\1\3\1\0"+
    "\13\3\1\264\5\3\26\0\2\265\53\0\1\266\37\0"+
    "\1\3\2\0\1\33\1\0\1\3\3\0\1\3\1\0"+
    "\1\3\1\267\21\3\26\0\2\270\6\0\1\271\44\0"+
    "\1\272\50\0\2\273\51\0\2\274\53\0\1\275\36\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6536];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\16\1\12\11\2\0\3\1\2\0\3\1"+
    "\1\0\2\1\1\0\1\1\1\0\6\1\1\0\3\1"+
    "\1\0\2\1\2\0\3\1\1\11\2\1\1\0\2\1"+
    "\2\0\7\1\3\0\2\1\2\0\4\1\2\0\11\1"+
    "\1\0\1\1\1\0\2\1\2\0\1\1\1\0\3\1"+
    "\3\0\7\1\2\0\2\1\2\0\1\1\1\0\1\1"+
    "\4\0\6\1\2\0\1\1\1\0\1\1\1\11\10\0"+
    "\2\1\1\0\1\11\2\0\1\1\3\11\1\0\1\11"+
    "\1\0\3\11\1\1\2\0\1\11\1\0\2\11\1\1"+
    "\2\0\1\11\1\1\2\11\5\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[189];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  public static LinkedList<TError> TablaEL = new LinkedList<TError> ();
  
  public static Vista principals = new Vista();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Analizador_Lexico(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Simbolos.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Error Lexico "+yytext()+ "Linea "+yyline+" Columna" + yycolumn );
           DefaultTableModel tokens = (DefaultTableModel) principals.tbtokens.getModel();
           tokens.addRow(new Object[] {"ErrorLexico",yytext(),yyline,yycolumn});
           TError datos = new TError(yytext(),yyline,yycolumn, "Error Lexico", "Simbolo no existe en el lenguaje");
           TablaEL.add(datos);
            }
          case 41: break;
          case 2: 
            { DefaultTableModel tokens = (DefaultTableModel) principals.tbtokens.getModel();
                 tokens.addRow(new Object[] {"Identificador",yytext(),yyline,yycolumn});  
                 return new Symbol(Simbolos.Identificador, yycolumn, yyline, yytext());
            }
          case 42: break;
          case 3: 
            { DefaultTableModel tokens = (DefaultTableModel) principals.tbtokens.getModel();
                 tokens.addRow(new Object[] {"Numero",yytext(),yyline,yycolumn});
                 return new Symbol(Simbolos.Numeros, yycolumn, yyline, yytext());
            }
          case 43: break;
          case 4: 
            { /*Ignore*/
            }
          case 44: break;
          case 5: 
            { DefaultTableModel tokens = (DefaultTableModel) principals.tbtokens.getModel();
                 tokens.addRow(new Object[] {"Comillas",yytext(),yyline,yycolumn});
                 return new Symbol(Simbolos.Comillas, yycolumn, yyline, yytext());
            }
          case 45: break;
          case 6: 
            { DefaultTableModel tokens = (DefaultTableModel) principals.tbtokens.getModel();
                 tokens.addRow(new Object[] {"Parentesis Apertura",yytext(),yyline,yycolumn});
                 return new Symbol(Simbolos.Parentesis_Aper, yycolumn, yyline, yytext());
            }
          case 46: break;
          case 7: 
            { DefaultTableModel tokens = (DefaultTableModel) principals.tbtokens.getModel();
                 tokens.addRow(new Object[] {"Parentesis Cierre",yytext(),yyline,yycolumn});
                 return new Symbol(Simbolos.Parentesis_Cierre, yycolumn, yyline, yytext());
            }
          case 47: break;
          case 8: 
            { DefaultTableModel tokens = (DefaultTableModel) principals.tbtokens.getModel();
                 tokens.addRow(new Object[] {"Igual",yytext(),yyline,yycolumn});
                 return new Symbol(Simbolos.Igual, yycolumn, yyline, yytext());
            }
          case 48: break;
          case 9: 
            { DefaultTableModel tokens = (DefaultTableModel) principals.tbtokens.getModel();
                 tokens.addRow(new Object[] {"Multiplicacion",yytext(),yyline,yycolumn});
                 return new Symbol(Simbolos.Signo_multiplicacion, yycolumn, yyline, yytext());
            }
          case 49: break;
          case 10: 
            { DefaultTableModel tokens = (DefaultTableModel) principals.tbtokens.getModel();
                 tokens.addRow(new Object[] {"Signo suma",yytext(),yyline,yycolumn});
                 return new Symbol(Simbolos.Signo_Suma, yycolumn, yyline, yytext());
            }
          case 50: break;
          case 11: 
            { DefaultTableModel tokens = (DefaultTableModel) principals.tbtokens.getModel();
                 tokens.addRow(new Object[] {"Signo Resta",yytext(),yyline,yycolumn});
                 return new Symbol(Simbolos.Signo_resta, yycolumn, yyline, yytext());
            }
          case 51: break;
          case 12: 
            { DefaultTableModel tokens = (DefaultTableModel) principals.tbtokens.getModel();
                 tokens.addRow(new Object[] {"Punto y coma",yytext(),yyline,yycolumn});
                 return new Symbol(Simbolos.Punto_coma, yycolumn, yyline, yytext());
            }
          case 52: break;
          case 13: 
            { DefaultTableModel tokens = (DefaultTableModel) principals.tbtokens.getModel();
                 tokens.addRow(new Object[] {"Separador",yytext(),yyline,yycolumn});
                 return new Symbol(Simbolos.Separador, yycolumn, yyline, yytext());
            }
          case 53: break;
          case 14: 
            { DefaultTableModel tokens = (DefaultTableModel) principals.tbtokens.getModel();
                 tokens.addRow(new Object[] {"Dos puntos",yytext(),yyline,yycolumn});
                 return new Symbol(Simbolos.Dos_puntos, yycolumn, yyline, yytext());
            }
          case 54: break;
          case 15: 
            { DefaultTableModel tokens = (DefaultTableModel) principals.tbtokens.getModel();
                 tokens.addRow(new Object[] {"Decimal",yytext(),yyline,yycolumn});
                 return new Symbol(Simbolos.Decimal, yycolumn, yyline, yytext());
            }
          case 55: break;
          case 16: 
            { DefaultTableModel tokens = (DefaultTableModel) principals.tbtokens.getModel();
                 tokens.addRow(new Object[] {"Palabra Reservada",yytext(),yyline,yycolumn});
                 return new Symbol(Simbolos.Titulo, yycolumn, yyline, yytext());
            }
          case 56: break;
          case 17: 
            { DefaultTableModel tokens = (DefaultTableModel) principals.tbtokens.getModel();
                 tokens.addRow(new Object[] {"Palabra Reservada",yytext(),yyline,yycolumn});  
                 return new Symbol(Simbolos.Inicio_Fila, yycolumn, yyline, yytext());
            }
          case 57: break;
          case 18: 
            { DefaultTableModel tokens = (DefaultTableModel) principals.tbtokens.getModel();
                 tokens.addRow(new Object[] {"Enlace",yytext(),yyline,yycolumn});  
                 return new Symbol(Simbolos.Enlace, yycolumn, yyline, yytext());
            }
          case 58: break;
          case 19: 
            { DefaultTableModel tokens = (DefaultTableModel) principals.tbtokens.getModel();
                 tokens.addRow(new Object[] {"Palabra Reservada",yytext(),yyline,yycolumn});  
                 return new Symbol(Simbolos.Ancho, yycolumn, yyline, yytext());
            }
          case 59: break;
          case 20: 
            { DefaultTableModel tokens = (DefaultTableModel) principals.tbtokens.getModel();
                 tokens.addRow(new Object[] {"Palabra Reservada",yytext(),yyline,yycolumn});
                 return new Symbol(Simbolos.Borde, yycolumn, yyline, yytext());
            }
          case 60: break;
          case 21: 
            { DefaultTableModel tokens = (DefaultTableModel) principals.tbtokens.getModel();
                 tokens.addRow(new Object[] {"Palabra Reservada",yytext(),yyline,yycolumn});  
                 return new Symbol(Simbolos.Altura, yycolumn, yyline, yytext());
            }
          case 61: break;
          case 22: 
            { DefaultTableModel tokens = (DefaultTableModel) principals.tbtokens.getModel();
                 tokens.addRow(new Object[] {"Correo",yytext(),yyline,yycolumn});
                 return new Symbol(Simbolos.Correo, yycolumn, yyline, yytext());
            }
          case 62: break;
          case 23: 
            { DefaultTableModel tokens = (DefaultTableModel) principals.tbtokens.getModel();
                 tokens.addRow(new Object[] {"Palabra Reservada",yytext(),yyline,yycolumn});
                 return new Symbol(Simbolos.Negrita, yycolumn, yyline, yytext());
            }
          case 63: break;
          case 24: 
            { DefaultTableModel tokens = (DefaultTableModel) principals.tbtokens.getModel();
                 tokens.addRow(new Object[] {"Palabra Reservada",yytext(),yyline,yycolumn});  
                 return new Symbol(Simbolos.Columna, yycolumn, yyline, yytext());
            }
          case 64: break;
          case 25: 
            { DefaultTableModel tokens = (DefaultTableModel) principals.tbtokens.getModel();
                 tokens.addRow(new Object[] {"Palabra Reservada",yytext(),yyline,yycolumn});
                 return new Symbol(Simbolos.Inicio_Doc_html, yycolumn, yyline, yytext());
            }
          case 65: break;
          case 26: 
            { DefaultTableModel tokens = (DefaultTableModel) principals.tbtokens.getModel();
                 tokens.addRow(new Object[] {"Palabra Reservada",yytext(),yyline,yycolumn});
                 return new Symbol(Simbolos.Imprimir, yycolumn, yyline, yytext());
            }
          case 66: break;
          case 27: 
            { DefaultTableModel tokens = (DefaultTableModel) principals.tbtokens.getModel();
                 tokens.addRow(new Object[] {"Identificador",yytext(),yyline,yycolumn});  
                 return new Symbol(Simbolos.Nombre, yycolumn, yyline, yytext());
            }
          case 67: break;
          case 28: 
            { DefaultTableModel tokens = (DefaultTableModel) principals.tbtokens.getModel();
                 tokens.addRow(new Object[] {"Palabra Reservada",yytext(),yyline,yycolumn});  
                 return new Symbol(Simbolos.Inicio_Tabla, yycolumn, yyline, yytext());
            }
          case 68: break;
          case 29: 
            { DefaultTableModel tokens = (DefaultTableModel) principals.tbtokens.getModel();
                 tokens.addRow(new Object[] {"Palabra Reservada",yytext(),yyline,yycolumn});  
                 return new Symbol(Simbolos.Inicio_Lista, yycolumn, yyline, yytext());
            }
          case 69: break;
          case 30: 
            { DefaultTableModel tokens = (DefaultTableModel) principals.tbtokens.getModel();
                 tokens.addRow(new Object[] {"Palabra Reservada",yytext(),yyline,yycolumn});
                 return new Symbol(Simbolos.Fin_Doc_html, yycolumn, yyline, yytext());
            }
          case 70: break;
          case 31: 
            { DefaultTableModel tokens = (DefaultTableModel) principals.tbtokens.getModel();
                 tokens.addRow(new Object[] {"Palabra Reservada",yytext(),yyline,yycolumn});  
                 return new Symbol(Simbolos.Fin_Fila, yycolumn, yyline, yytext());
            }
          case 71: break;
          case 32: 
            { DefaultTableModel tokens = (DefaultTableModel) principals.tbtokens.getModel();
                 tokens.addRow(new Object[] {"Identificador",yytext(),yyline,yycolumn});  
                 return new Symbol(Simbolos.EnlaceR, yycolumn, yyline, yytext());
            }
          case 72: break;
          case 33: 
            { DefaultTableModel tokens = (DefaultTableModel) principals.tbtokens.getModel();
                 tokens.addRow(new Object[] {"Palabra Reservada",yytext(),yyline,yycolumn});  
                 return new Symbol(Simbolos.Inicio_Imagen, yycolumn, yyline, yytext());
            }
          case 73: break;
          case 34: 
            { DefaultTableModel tokens = (DefaultTableModel) principals.tbtokens.getModel();
                 tokens.addRow(new Object[] {"Palabra Reservada",yytext(),yyline,yycolumn});  
                 return new Symbol(Simbolos.Fin_Tabla, yycolumn, yyline, yytext());
            }
          case 74: break;
          case 35: 
            { DefaultTableModel tokens = (DefaultTableModel) principals.tbtokens.getModel();
                 tokens.addRow(new Object[] {"Palabra Reservada",yytext(),yyline,yycolumn});  
                 return new Symbol(Simbolos.Fin_Lista, yycolumn, yyline, yytext());
            }
          case 75: break;
          case 36: 
            { DefaultTableModel tokens = (DefaultTableModel) principals.tbtokens.getModel();
                 tokens.addRow(new Object[] {"Palabra Reservada",yytext(),yyline,yycolumn});  
                 return new Symbol(Simbolos.Fin_Imagen, yycolumn, yyline, yytext());
            }
          case 76: break;
          case 37: 
            { DefaultTableModel tokens = (DefaultTableModel) principals.tbtokens.getModel();
                 tokens.addRow(new Object[] {"Palabra Reservada",yytext(),yyline,yycolumn});  
                 return new Symbol(Simbolos.Inicio_Cuerpo, yycolumn, yyline, yytext());
            }
          case 77: break;
          case 38: 
            { DefaultTableModel tokens = (DefaultTableModel) principals.tbtokens.getModel();
                 tokens.addRow(new Object[] {"Palabra Reservada",yytext(),yyline,yycolumn});  
                 return new Symbol(Simbolos.Fin_Cuerpo, yycolumn, yyline, yytext());
            }
          case 78: break;
          case 39: 
            { DefaultTableModel tokens = (DefaultTableModel) principals.tbtokens.getModel();
                 tokens.addRow(new Object[] {"Palabra Reservada",yytext(),yyline,yycolumn});
                 return new Symbol(Simbolos.Inicio_Encabezado, yycolumn, yyline, yytext());
            }
          case 79: break;
          case 40: 
            { DefaultTableModel tokens = (DefaultTableModel) principals.tbtokens.getModel();
                 tokens.addRow(new Object[] {"Palabra Reservada",yytext(),yyline,yycolumn});
                 return new Symbol(Simbolos.Fin_Encabezado, yycolumn, yyline, yytext());
            }
          case 80: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
